/*
 * This Gradle build script is used to build the project, run static analysis,
 * run tests, and measure code coverage.
 *
 * It allows performing the following quality assurance activities:
 *
 * 1. Compile Java code.
 * 2. Compile tests.
 * 3. Build JavaDoc documentation.
 * 4. Run Checkstyle (static checker).
 * 5. Run PMD (static checker).
 * 6. Run tests.
 * 7. Measure code coverage with JaCoCo and build a report.
 * 8. Check whether JaCoCo metrics (coverage and cyclomatic complexity) satisfy limits.
 *
 * If any of the steps fails, build is considered failed.
 * All of these steps are run by the "build" task.
 *
 * Also, it is possible to run some of the steps individually by using corresponding tasks.
 */

plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
}

group 'patternika'
version '1.0-SNAPSHOT'

// To compile files that may contain non-English characters, UTF-8 must be used.
// Java source code must be compatible with JDK 1.8.
compileJava {
    options.encoding    = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
compileTestJava {
    options.encoding    = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// Repositories with dependencies.
repositories {
    // Dependencies are taken from public repositories.
    mavenCentral()
}

// JAR dependencies.
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'guru.nidi', name: 'graphviz-java', version: '0.18.0'
}

jar {
    archiveName 'patternika.jar'
    manifest {
        attributes 'Manifest-Version': '1.0'
//      attributes 'Main-Class': 'org.cqfn.patternika.launcher.Main'
    }
}

checkstyle {
    // The build will be terminated if there are failing style checks.
    ignoreFailures = false
}

pmd {
    toolVersion = "6.29.0"
    // The build should not be terminated if there are failing PMD rules.
    ignoreFailures = true
    // Custom PMD rules to suppress irrelevant warnings.
    // In general, PMD produces a great number of false positives.
    // We need to provide a custom ruleset that enables relevant rules and excludes the irrelevant.
    // See details here:
    //    https://pmd.github.io/latest/pmd_rules_java.html
    //    https://pmd.github.io/pmd-6.29.0/pmd_userdocs_suppressing_warnings.html
    //    https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.PmdExtension.html
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

test {
    // The build will be terminated if there are failing tests.
    ignoreFailures = false
    // JaCoCo report is always generated after tests run.
    finalizedBy jacocoTestReport
}

// JaCoCo version.
jacoco {
    toolVersion = "0.8.4"
}

// Enable JaCoCo to generate reports in XML format (might be needed for CI).
jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
    // Tests are required to run before generating the report.
    dependsOn test
    // After getting coverage, limits on coverage metrics are checked.
    finalizedBy jacocoTestCoverageVerification
}

// Verification of code metrics that must satisfy limits.
// See details here:
// https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_report_violation_rules
jacocoTestCoverageVerification {
    // Needs JaCoCo report to be collected before checking metrics.
    dependsOn jacocoTestReport
    // Rules.
    violationRules {
        rule {
            element = 'METHOD'
            // Method complexity is limited to avoid creating too complex methods.
            // See details here: https://en.wikipedia.org/wiki/Cyclomatic_complexity
            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                maximum = 10
            }
        }
    }
}

// JavaDocs must always be built when the check is run.
check.dependsOn javadoc
